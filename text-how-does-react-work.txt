How does react work?
    React is a JavaScript library for building user interfaces.

    ReactDOM is the interface to the web

    React uses Virtual DOM, it determines how the component tree, which your app is building in the end, and every component itself, of course has a sub tree that JSX code returned by that component, it determines how that component tree currently looks like and what it should look like,for example, after a state update.
    And that information is then handed off to ReactDOM which now knows about the differences and which then knows how it should manipulate the real DOM to match that virtual DOM, that virtual snapshot React derived for your component trees.

    Note: react rerenders the props and state(useState) of the component tree, and then ReactDOM updates the DOM to match the virtual DOM.
    also note: react rerenders only when props or state(useState) changes.

React.memo:
    So React.memo allows us to optimize functional components.Now, what does memo do?
    It tells React that for this component,
    which it gets as a argument,
    React should look at the props this component gets and check the new value for all those props and compare it to the previous value those props got.
    And only if the value of a prop changed,
    the component should be re-executed and re-evaluated.
    And if the parent component changed
    but the prop values for that component here did not change, component execution will be skipped.

UseCallback is a hook that allows us to basically store a function across component executions.So it allows us to tell React that we wanna save a function and that this function should not be recreated with every execution.

Class-based Components can't use React Hooks
upto react 16.8 we can't change state and effects in functional components, but in 16.8 react introduecd react hooks, which can be used in functional Components 

The Component Lifecycle (Class-based Components)
    componentDidMount()
    componentDidUpdate()
    componentWillUnmount()
    componentWillMount()
    componentWillUpdate()
    componentWillReceiveProps()
    componentWillReceiveState()

    - componentDidMount() is called after the component is rendered for the first time. It's basically the equivalent to using use EFFECT with no dependencies.
    if you have an empty dependencies array
    the EFFECT function is only executed in that case.So adding use of fact with an empty dependency array is basically your equivalent to componentDidMount().


    - componentDidUpdate() is called after the component is updated.So when something changed when your state changed
    and the component was re-evaluated and re-rendered this is basically your equivalent to use effect with some dependencies, whenever the dependencies change, the use EFFECT function re-executes and the dependencies are re-evaluated when the component is re-evaluated and was rendered again.

    
    - componentWillUnmount() is called before the component is unmounted and destroyed.and here the equivalent is basically the clean up function from useEFFECT that cleanup function is called right before the EFFECT function is executed again and also always again, when the component is about to be removed from the DOM.

In JavaScript, super refers to the parent class constructor.

useEFFECT:- without dependencies useEFFECT will trigger the effect function whenever the component is re-evaluated and re-rendered. and any state changes.

useEFFECT is a combination of three Lifecycle methods:
    componentDidMount()
    componentDidUpdate()
    componentWillUnmount()
    